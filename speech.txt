/* 
title:    intro to msp432 gpio and keil microvision
purpose:  to gain familiarity with the gpio on the 
          msp432 board
name:     drew ryczek 
date:     01/15/25

this file prepared by ljbeato
01/11/2021
  
*/
#include "msp.h" 
#include "common.h"

// led1
#define  led1_port         p1
#define  led1_pin          bit0

// led2
#define  led2_port         p2

// led2 - red
#define  led2_red_pin      bit0

// led2 - green
#define  led2_green_pin    bit1

// led2 - blue
#define  led2_blue_pin     bit2

// push button 1
#define  push_btn_1_port   p1
#define  push_btn_1_pin    bit1

// push button 2
#define  push_btn_2_port   p1
#define  push_btn_2_pin    bit4

// main program
// 1. init leds
// 2. init switch
// 3. init state=0
// 4. if sw1 pressed, light led1
// 5. if sw2 pressed, cycle next color triplet of rgb,cmy,w
//	first press - rgb
//  second press - cmy
//  third press - w
//  repeat
// 6. if button released
//		turn off the led
//
//
void led1_init(void)
{
	// configure portpin for led1 as port i/o 
  led1_port->sel0 &= ~led1_pin;
	led1_port->sel1 &= ~led1_pin;

	// make built-in led1 led high drive strength
  led1_port->ds |= led1_pin;

	// make built-in led1 out	 
	led1_port->dir |= led1_pin;

	// turn off led
	led1_port->out |= led1_pin;

}

void led2_init(void)
{
	// configure portpin for led2 as port i/o 
  led2_port->sel0 &= ~(led2_red_pin | led2_green_pin | led2_blue_pin);
	led2_port->sel1 &= ~(led2_red_pin | led2_green_pin | led2_blue_pin);

	// make built-in led2 leds high drive strength
  led1_port->ds |= (led2_red_pin | led2_green_pin | led2_blue_pin);

	// make built-in led2 out	 
	led2_port->dir |= (led2_red_pin | led2_green_pin | led2_blue_pin);

	// turn off led
	led2_port->out |= led2_red_pin;
  led2_port->out |= led2_green_pin;
	led2_port->out |= led2_blue_pin;
}

void switches_init(void)
{
	// configure portpin for switch 1 and switch2 as port i/o 
	push_btn_1_port->sel0 &= ~push_btn_1_pin;
	push_btn_1_port->sel1 &= ~push_btn_1_pin;
	
	push_btn_2_port->sel0 &= ~push_btn_2_pin;
	push_btn_2_port->sel1 &= ~push_btn_2_pin;

	// configure as input
	push_btn_1_port->dir &= ~push_btn_1_pin;
	push_btn_2_port->dir &= ~push_btn_2_pin;
	
	// resistor enable for pull-up resistor
	push_btn_1_port->ren |= push_btn_1_pin;
	push_btn_2_port->ren |= push_btn_2_pin;
	push_btn_1_port->out |= push_btn_1_pin;
	push_btn_2_port->out |= push_btn_2_pin;

              
}
//------------switch_input------------
// read and return the status of switch1
// input: none
// return: true if pressed
//         false if not pressed
boolean switch1_pressed(void)
{
	boolean retval = false;
	
	// check if pressed
	if ( (push_btn_1_port->in & push_btn_1_pin) != push_btn_1_pin)
	{
		  retval = true;
	}
	
	return (retval);              // return true(pressed) or false(not pressed)
}
//------------switch_input------------
// read and return the status of switch2
// input: none
// return: true if pressed
//         false if not pressed
boolean switch2_pressed(void)
{
	boolean retval = false;
	
	// check if pressed
	if ( (push_btn_2_port->in & push_btn_2_pin) != push_btn_2_pin)
	{
		  retval = true;
	}

	return (retval);              // return true(pressed) or false(not pressed)
}

//------------delay------------
// loop used for delays
// input: none
// 
void delay(void)
{
	  for (int i = 0; i < 100000; i++)
	  {
		    // do nothing
	  }
}

int main(void){
	//initialize any supporting variables
	uint32_t btn2pressed = 0;

	// initialize buttons and leds
	led1_init();
	led2_init();
	switches_init();
	
	for(;;)
	{

		//turn on an led1 (red) when button 1 is held
		if(switch1_pressed() == true)
		{
				// turn on led1
			  led1_port->out |= led1_pin;
		}
		else
		{
		    // turn off led1
			  led1_port->out &= ~led1_pin;
		}

		// check if button 2 was pressed
		if (switch2_pressed() == true)
		{
			  btn2pressed++;
		  
			  if (btn2pressed == 1)  // first time pressed
				{
					  led2_port->out |= led2_red_pin;    // red
            delay();
					  led2_port->out &= ~led2_red_pin;   // turn off red
					  led2_port->out |= led2_green_pin;  // green
            delay();
					  led2_port->out &= ~led2_green_pin; // turn off green
					  led2_port->out |= led2_blue_pin;   // blue
					  delay();
					  led2_port->out &= ~led2_blue_pin;  // turn off blue

				}		
        else if (btn2pressed == 2)  // second time pressed
				{
					  // cyan
            led2_port->out |= led2_blue_pin;    // blue
					  led2_port->out |= led2_green_pin;   // green
            delay();
					  led2_port->out &= ~led2_green_pin;  // turn off green
					  
					  // magenta
					  led2_port->out |= led2_red_pin;     // red
					  delay();
					
					  // yellow
					  led2_port->out &= ~led2_blue_pin;  // turn off blue
					  led2_port->out |= led2_green_pin;  // green
					  delay();
					
					  led2_port->out &= ~led2_red_pin;   // turn off red
					  led2_port->out &= ~led2_green_pin; // turn off green
					  delay();	  
					  
				}					
				else if (btn2pressed == 3)
				{
					  led2_port->out |= led2_red_pin;
					  led2_port->out |= led2_green_pin;
					  led2_port->out |= led2_blue_pin;
					  delay();
					  led2_port->out &= ~led2_red_pin;
					  led2_port->out &= ~led2_green_pin;
					  led2_port->out &= ~led2_blue_pin;
				}
				else
				{
					  // restart the sequence
					  btn2pressed = 0;
				}
		}

		else
		{
		    // turn off led2
        led2_port->out &= ~led2_red_pin;
		    led2_port->out &= ~led2_green_pin;
		    led2_port->out &= ~led2_blue_pin;
		}
	}
}

